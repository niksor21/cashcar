import telebot
from telebot import types
import time
import threading
from db import get_all_requests, update_status, get_request_by_id  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db.py
import os
from config import API_TOKEN, SECRET_PHRASE

bot = telebot.TeleBot(API_TOKEN)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (chat_id)
authorized_users = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:
# –∫–ª—é—á: chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ: request_id, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∂–∞–ª "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
pending_executor = {}

#############################################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏

def build_request_message(req):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ req: (id, fullname, email, phone, subject, message, timestamp, status, executor)
    """
    text = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"üîπ <b>ID:</b> {req[0]}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {req[6]}\n"
        f"üë§ <b>–ò–º—è:</b> {req[1]}\n"
        f"üìß <b>Email:</b> {req[2]}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req[3]}\n"
        f"üìù <b>–¢–∞—Ä–∏—Ñ:</b> {req[4]}\n"
        f"üöó <b>–ú–∞—à–∏–Ω–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> {req[5]}\n"
        f"üö® <b>–°—Ç–∞—Ç—É—Å:</b> {req[7]}\n"
    )
    if req[8]:
        text += f"üë®‚Äçüíº <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {req[8]}\n"

    markup = types.InlineKeyboardMarkup()
    if req[7] == "new":
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–æ–≤–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        markup.add(types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take:{req[0]}"))
    elif req[7] == "in_progress":
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–£—Å–ø–µ—à–Ω–æ" –∏ "–û—Ç–∫–∞–∑"
        markup.add(types.InlineKeyboardButton("üèÅ –£—Å–ø–µ—à–Ω–æ", callback_data=f"close:{req[0]}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑", callback_data=f"reject:{req[0]}"))
    elif req[7] in ["completed", "rejected"]:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"return:{req[0]}"))
    return text, markup

#############################################
# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–∞: /start my_secret_phrase
    parts = message.text.strip().split()
    if len(parts) >= 2 and parts[1] == SECRET_PHRASE:
        authorized_users.add(chat_id)
        bot.reply_to(message, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM-–±–æ—Ç!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['list'])
def handle_list(message):
    if message.chat.id not in authorized_users:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start <—Å–µ–∫—Ä–µ—Ç–Ω–∞—è_—Ñ—Ä–∞–∑–∞> –¥–ª—è –≤—Ö–æ–¥–∞.")
        return

    requests = get_all_requests()
    if not requests:
        bot.reply_to(message, "üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:</b>\n"
    for req in requests:
        response += f"\nüîπ <b>ID:</b> {req['id']}\n"
        response += f"üïí <b>–í—Ä–µ–º—è:</b> {req['timestamp']}\n"
        response += f"üë§ <b>–ò–º—è:</b> {req['fullname']}\n"
        response += f"üìß <b>Email:</b> {req['email']}\n"
        response += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['phone']}\n"
        response += f"üìù <b>–¢–∞—Ä–∏—Ñ:</b> {req['subject']}\n"
        response += f"üöó <b>–ú–∞—à–∏–Ω–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> {req['message']}\n"
        response += f"üö® <b>–°—Ç–∞—Ç—É—Å:</b> {req['status']}\n"
        if req['executor']:
            response += f"üë®‚Äçüíº <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {req['executor']}\n"
        response += "-----------------------\n"
    bot.reply_to(message, response, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ /show <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
@bot.message_handler(commands=['show'])
def handle_show(message):
    if message.chat.id not in authorized_users:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start <—Å–µ–∫—Ä–µ—Ç–Ω–∞—è_—Ñ—Ä–∞–∑–∞> –¥–ª—è –≤—Ö–æ–¥–∞.")
        return

    parts = message.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /show 3")
        return

    try:
        request_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    req = get_request_by_id(request_id)
    if not req:
        bot.reply_to(message, f"‚ùå –ó–∞—è–≤–∫–∞ —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text, markup = build_request_message(req)
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)

#############################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫

# –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
@bot.callback_query_handler(func=lambda call: call.data.startswith("take:"))
def callback_take(call):
    if call.message.chat.id not in authorized_users:
        bot.answer_callback_query(call.id, "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    _, request_id = call.data.split(":")
    pending_executor[call.message.chat.id] = request_id
    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ ID {request_id}:")
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in pending_executor)
def handle_executor_input(message):
    chat_id = message.chat.id
    request_id = pending_executor.pop(chat_id, None)
    if request_id:
        executor = message.text.strip()
        update_status(request_id, "in_progress", executor)
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        req = get_request_by_id(request_id)
        if req:
            text, markup = build_request_message(req)
            try:
                bot.edit_message_text(text, chat_id, message.message_id, parse_mode='HTML', reply_markup=markup)
            except Exception as e:
                bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)
        bot.reply_to(message, f"‚úÖ –ó–∞—è–≤–∫–∞ {request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {executor}.")

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π: "–£—Å–ø–µ—à–Ω–æ" (—Ä–∞–Ω–µ–µ "–ó–∞–∫—Ä—ã—Ç—å"), "–û—Ç–∫–∞–∑" (—Ä–∞–Ω–µ–µ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"), "–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("close:") or call.data.startswith("reject:") or call.data.startswith("return:"))
def callback_status_change(call):
    if call.message.chat.id not in authorized_users:
        bot.answer_callback_query(call.id, "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    data_parts = call.data.split(":")
    action = data_parts[0]
    request_id = data_parts[1]

    if action == "close":
        update_status(request_id, "completed")
        bot.answer_callback_query(call.id, f"‚úÖ –ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É—Å–ø–µ—à–Ω–∞—è.")
    elif action == "reject":
        update_status(request_id, "rejected")
        bot.answer_callback_query(call.id, f"‚ùå –ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–∞–∑.")
    elif action == "return":
        update_status(request_id, "in_progress")
        bot.answer_callback_query(call.id, f"‚Ü©Ô∏è –ó–∞—è–≤–∫–∞ {request_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É.")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    updated_req = get_request_by_id(request_id)
    if updated_req:
        text, markup = build_request_message(updated_req)
        try:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

#############################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
def notify_new_request(req):
    text, markup = build_request_message(req)
    for user_id in authorized_users:
        try:
            bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

#############################################
# –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
last_request_id = 0
def poll_new_requests():
    global last_request_id
    while True:
        try:
            requests = get_all_requests()
            if requests:
                max_id = max(req[0] for req in requests)
                if max_id > last_request_id:
                    new_reqs = [req for req in requests if req[0] > last_request_id]
                    for req in new_reqs:
                        notify_new_request(req)
                    last_request_id = max_id
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:", e)
        time.sleep(5)

polling_thread = threading.Thread(target=poll_new_requests, daemon=True)
polling_thread.start()

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
